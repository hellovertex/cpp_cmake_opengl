#include <iostream>
#include <gtest/gtest.h>
#include <functional>
#include <map>
#include <string>
#include <vector>

// todo: create EventDispatcher object inside namespace EventDispatcher
namespace EventDispatcher {
//    void hello() {
//        std::cout << "Hello From Dispatcher";
//    }
    // todo: when can I use structs and handle memory manually, and when is it mandatory
    //  to use c++ RAII? --> use structs only for PODs
    //  -- https://stackoverflow.com/questions/54585/when-should-you-use-a-class-vs-a-struct-in-c
    class EventDispatcher {
    public:
        // "explicit" prevents the compiler being allowed to make one implicit conversion
        // to resolve the parameters to a function.
        // todo; understand the following constructor generated by CLion:
//        explicit EventDispatcher(const std::map<CallbackType, std::vector<Callback>> &listeners) : listeners(
//                listeners) {}
        // using is like a typedef in c
        // std::function defines placeholder for things behaving like a function pointer
        // with <returnvalue (input args)>
        using Callback = std::function<void(void *)>;
    public:
        // use default constructor as we dont require any instantiation args
        // todo: add public methods here
        // void AddEventListener
        // void RemoveEventListener
        // bool HasEventListener
        // void DispatchEvent:
    private:
        // for(int n : v) {std::cout << n)
        using CallbackType = std::string;
        std::map<CallbackType, std::vector<Callback>> listeners;
    };
}
